// Code generated by go-swagger; DO NOT EDIT.

package auth_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAuthRegisterHandlerFunc turns a function with the right signature into a post auth register handler
type PostAuthRegisterHandlerFunc func(PostAuthRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAuthRegisterHandlerFunc) Handle(params PostAuthRegisterParams) middleware.Responder {
	return fn(params)
}

// PostAuthRegisterHandler interface for that can handle valid post auth register params
type PostAuthRegisterHandler interface {
	Handle(PostAuthRegisterParams) middleware.Responder
}

// NewPostAuthRegister creates a new http.Handler for the post auth register operation
func NewPostAuthRegister(ctx *middleware.Context, handler PostAuthRegisterHandler) *PostAuthRegister {
	return &PostAuthRegister{Context: ctx, Handler: handler}
}

/* PostAuthRegister swagger:route POST /auth/register AuthApi postAuthRegister

ユーザー登録

*/
type PostAuthRegister struct {
	Context *middleware.Context
	Handler PostAuthRegisterHandler
}

func (o *PostAuthRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAuthRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
