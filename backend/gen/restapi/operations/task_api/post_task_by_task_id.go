// Code generated by go-swagger; DO NOT EDIT.

package task_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostTaskByTaskIDHandlerFunc turns a function with the right signature into a post task by task Id handler
type PostTaskByTaskIDHandlerFunc func(PostTaskByTaskIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTaskByTaskIDHandlerFunc) Handle(params PostTaskByTaskIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostTaskByTaskIDHandler interface for that can handle valid post task by task Id params
type PostTaskByTaskIDHandler interface {
	Handle(PostTaskByTaskIDParams, interface{}) middleware.Responder
}

// NewPostTaskByTaskID creates a new http.Handler for the post task by task Id operation
func NewPostTaskByTaskID(ctx *middleware.Context, handler PostTaskByTaskIDHandler) *PostTaskByTaskID {
	return &PostTaskByTaskID{Context: ctx, Handler: handler}
}

/* PostTaskByTaskID swagger:route POST /task/{task_id} TaskApi postTaskByTaskId

/{task_id}の課題を更新・作成する

*/
type PostTaskByTaskID struct {
	Context *middleware.Context
	Handler PostTaskByTaskIDHandler
}

func (o *PostTaskByTaskID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTaskByTaskIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
