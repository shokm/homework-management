// Code generated by go-swagger; DO NOT EDIT.

package task_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTasksBySubjectsParams creates a new GetTasksBySubjectsParams object
//
// There are no default values defined in the spec.
func NewGetTasksBySubjectsParams() GetTasksBySubjectsParams {

	return GetTasksBySubjectsParams{}
}

// GetTasksBySubjectsParams contains all the bound params for the get tasks by subjects operation
// typically these are obtained from a http.Request
//
// swagger:parameters getTasksBySubjects
type GetTasksBySubjectsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*アーカイブされた教科を含めるか（デフォルトでは含まれない）
	  In: query
	*/
	IncludeArchived *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetTasksBySubjectsParams() beforehand.
func (o *GetTasksBySubjectsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIncludeArchived, qhkIncludeArchived, _ := qs.GetOK("includeArchived")
	if err := o.bindIncludeArchived(qIncludeArchived, qhkIncludeArchived, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIncludeArchived binds and validates parameter IncludeArchived from query.
func (o *GetTasksBySubjectsParams) bindIncludeArchived(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("includeArchived", "query", "bool", raw)
	}
	o.IncludeArchived = &value

	return nil
}
